import {createEntityAdapter, createSelector} from '@reduxjs/toolkit'
import {apiSlice} from './apiSlice'

interface IOrder {
  [key: string]: any
}

interface IOrdersResponse {
  success: boolean
  found: number
  orders: IOrder[]
}

interface IOrderResponse {
  success: boolean
  order: IOrder
}

const ordersAdapters = createEntityAdapter({})
const initialState = ordersAdapters.getInitialState()

// TODO: Remove in production.
const fakeRequestDelay = async () => {
  new Promise((resolve) => setTimeout(resolve, 700))
}

const ordersApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    getOrders: builder.query<any, void>({
      query: () => 'orders',
      transformResponse: (response: IOrdersResponse) => {
        fakeRequestDelay()
        const loadedOrders = response?.orders.map((order) => {
          order.id = order._id
          return order
        })
        return ordersAdapters.setAll(initialState, loadedOrders)
      },
      providesTags: (result: any) => {
        if (result?.ids) {
          return [
            {type: 'Order', id: 'LIST'},
            ...result.ids.map((id: string) => ({type: 'Order', id})),
          ]
        }
        return [{type: 'Order', id: 'LIST'}]
      },
    }),
    getMyOrders: builder.query<any, void>({
      query: () => 'me/orders',
      transformResponse: (response: IOrdersResponse) => {
        fakeRequestDelay()
        const loadedOrders = response?.orders.map((order) => {
          order.id = order._id
          return order
        })
        return ordersAdapters.setAll(initialState, loadedOrders)
      },
      providesTags: (result: any) => {
        if (result?.ids) {
          return [
            {type: 'Order', id: 'LIST'},
            ...result.ids.map((id: string) => ({type: 'Order', id})),
          ]
        }
        return [{type: 'Order', id: 'LIST'}]
      },
    }),
    getOrder: builder.query<IOrderResponse, string>({
      query: (id) => `orders/${id}`,
      transformResponse: (response: any) => {
        fakeRequestDelay()
        return response
      },
      providesTags: (result, error, id) => (result ? [{type: 'Order', id}] : ['Order']),
    }),
    updateOrder: builder.mutation<any, any>({
      query: ({id, data}) => ({
        url: `orders/${id}`,
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{type: 'Order', id: arg.id}],
    }),
    deleteOrder: builder.mutation<any, any>({
      query: (id) => ({
        url: `orders/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, id) => [{type: 'Order', id}],
    }),
    createOrder: builder.mutation<any, any>({
      query: (data) => ({
        url: 'orders',
        method: 'POST',
        body: data,
      }),
      invalidatesTags: ['Order'],
    }),
  }),
  overrideExisting: false,
})

export const {
  useGetOrdersQuery,
  useGetMyOrdersQuery,
  useGetOrderQuery,
  useUpdateOrderMutation,
  useDeleteOrderMutation,
  useCreateOrderMutation,
} = ordersApiSlice

// Returns query result object.
export const selectOrdersResult = ordersApiSlice.endpoints.getOrders.select()
export const selectMyOrdersResult = ordersApiSlice.endpoints.getMyOrders.select()

// Creates memoized selector.
const selectOrdersData = createSelector(
  selectOrdersResult,
  (ordersResult) => ordersResult.data // normalized state with ids and entities.
)

const selectMyOrdersData = createSelector(
  selectMyOrdersResult,
  (ordersResult) => ordersResult.data // normalized state with ids and entities.
)

// Exporting renamed selectors generated by `getSelectors`.
export const {
  selectAll: selectAllOrders,
  selectById: selectOrderById,
  selectIds: selectOrderIds,
} = ordersAdapters.getSelectors((state: any) => selectOrdersData(state) ?? initialState)

export const {
  selectAll: selectAllMyOrders,
  selectById: selectMyOrderById,
  selectIds: selectMyOrderIds,
} = ordersAdapters.getSelectors((state: any) => selectMyOrdersData(state) ?? initialState)
